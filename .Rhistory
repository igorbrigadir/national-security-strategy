naive6.rmse <- getrmse(dat6.test$mkl.start, naive6.p)
naive7.rmse <- getrmse(dat7.test$mkl.start, naive7.p)
naive8.rmse <- getrmse(dat8.test$mkl.start, naive8.p)
naive9.rmse <- getrmse(dat9.test$mkl.start, naive9.p)
naive10.rmse <- getrmse(dat10.test$mkl.start, naive10.p)
knn1.rmse <-getrmse(dat1.test$mkl.start, knn1.p[,2])
knn2.rmse <-getrmse(dat2.test$mkl.start, knn2.p[,2])
knn3.rmse <-getrmse(dat3.test$mkl.start, knn3.p[,2])
knn4.rmse <-getrmse(dat4.test$mkl.start, knn4.p[,2])
knn5.rmse <-getrmse(dat5.test$mkl.start, knn5.p[,2])
knn6.rmse <-getrmse(dat6.test$mkl.start, knn6.p[,2])
knn7.rmse <-getrmse(dat7.test$mkl.start, knn7.p[,2])
knn8.rmse <-getrmse(dat8.test$mkl.start, knn8.p[,2])
knn9.rmse <-getrmse(dat9.test$mkl.start, knn9.p[,2])
knn10.rmse <-getrmse(dat10.test$mkl.start, knn10.p[,2])
rf1.rmse <-getrmse(dat1.test$mkl.start, rf1.p)
rf2.rmse <-getrmse(dat2.test$mkl.start, rf2.p)
rf3.rmse <-getrmse(dat3.test$mkl.start, rf3.p)
rf4.rmse <-getrmse(dat4.test$mkl.start, rf4.p)
rf5.rmse <-getrmse(dat5.test$mkl.start, rf5.p)
rf6.rmse <-getrmse(dat6.test$mkl.start, rf6.p)
rf7.rmse <-getrmse(dat7.test$mkl.start, rf7.p)
rf8.rmse <-getrmse(dat8.test$mkl.start, rf8.p)
rf9.rmse <-getrmse(dat9.test$mkl.start, rf9.p)
rf10.rmse <-getrmse(dat10.test$mkl.start, rf10.p)
bma1.rmse <-getrmse(dat1.test$mkl.start, bma1.p)
bma2.rmse <-getrmse(dat2.test$mkl.start, bma2.p)
bma3.rmse <-getrmse(dat3.test$mkl.start, bma3.p)
bma4.rmse <-getrmse(dat4.test$mkl.start, bma4.p)
bma5.rmse <-getrmse(dat5.test$mkl.start, bma5.p)
bma6.rmse <-getrmse(dat6.test$mkl.start, bma6.p)
bma7.rmse <-getrmse(dat7.test$mkl.start, bma7.p)
bma8.rmse <-getrmse(dat8.test$mkl.start, bma8.p)
bma9.rmse <-getrmse(dat9.test$mkl.start, bma9.p)
bma10.rmse <-getrmse(dat10.test$mkl.start, bma10.p)
log1.rmse <- getrmse(dat1.test$mkl.start, log1.p)
log2.rmse <- getrmse(dat2.test$mkl.start, log2.p)
log3.rmse <- getrmse(dat3.test$mkl.start, log3.p)
log4.rmse <- getrmse(dat4.test$mkl.start, log4.p)
log5.rmse <- getrmse(dat5.test$mkl.start, log5.p)
log6.rmse <- getrmse(dat6.test$mkl.start, log6.p)
log7.rmse <- getrmse(dat7.test$mkl.start, log7.p)
log8.rmse <- getrmse(dat8.test$mkl.start, log8.p)
log9.rmse <- getrmse(dat9.test$mkl.start, log9.p)
log10.rmse <- getrmse(dat10.test$mkl.start, log10.p)
naivermse <- c(naive1.rmse, naive2.rmse, naive3.rmse, naive4.rmse, naive5.rmse,
naive6.rmse, naive7.rmse, naive8.rmse, naive9.rmse, naive10.rmse)
knnrmse <- c(knn1.rmse, knn2.rmse, knn3.rmse, knn4.rmse, knn5.rmse,
knn6.rmse, knn7.rmse, knn8.rmse, knn9.rmse, knn10.rmse)
rfrmse <- c(rf1.rmse, rf2.rmse, rf3.rmse, rf4.rmse, rf5.rmse,
rf6.rmse, rf7.rmse, rf8.rmse, rf9.rmse, rf10.rmse)
bmarmse <- c(bma1.rmse, bma2.rmse, bma3.rmse, bma4.rmse, bma5.rmse,
bma6.rmse, bma7.rmse, bma8.rmse, bma9.rmse, bma10.rmse)
logrmse <- c(log1.rmse, log2.rmse, log3.rmse, log4.rmse, log5.rmse,
log6.rmse, log7.rmse, log8.rmse, log9.rmse, log10.rmse)
# With ROCR
getauc <- function(p,y) {
require(ROCR)
pred <- prediction(p,y)
auc <- performance(pred, measure = 'auc')
aucval <- unlist(auc@y.values)
return(aucval)
}
getroc <- function(p,y) {
require(ROCR)
pred <- prediction(p,y)
roc <- performance(pred, measure = 'tpr', x.measure = 'fpr')
return(roc)
}
knn1.auc <- getauc(knn1.p[,2], dat1.test$mkl.start)
knn2.auc <- getauc(knn2.p[,2], dat2.test$mkl.start)
knn3.auc <- getauc(knn3.p[,2], dat3.test$mkl.start)
knn4.auc <- getauc(knn4.p[,2], dat4.test$mkl.start)
knn5.auc <- getauc(knn5.p[,2], dat5.test$mkl.start)
knn6.auc <- getauc(knn6.p[,2], dat6.test$mkl.start)
knn7.auc <- getauc(knn7.p[,2], dat7.test$mkl.start)
knn8.auc <- getauc(knn8.p[,2], dat8.test$mkl.start)
knn9.auc <- getauc(knn9.p[,2], dat9.test$mkl.start)
knn10.auc <- getauc(knn10.p[,2], dat10.test$mkl.start)
rf1.auc <- getauc(rf1.p, dat1.test$mkl.start)
rf2.auc <- getauc(rf2.p, dat2.test$mkl.start)
rf3.auc <- getauc(rf3.p, dat3.test$mkl.start)
rf4.auc <- getauc(rf4.p, dat4.test$mkl.start)
rf5.auc <- getauc(rf5.p, dat5.test$mkl.start)
rf6.auc <- getauc(rf6.p, dat6.test$mkl.start)
rf7.auc <- getauc(rf7.p, dat7.test$mkl.start)
rf8.auc <- getauc(rf8.p, dat8.test$mkl.start)
rf9.auc <- getauc(rf9.p, dat9.test$mkl.start)
rf10.auc <- getauc(rf10.p, dat10.test$mkl.start)
bma1.auc <- getauc(bma1.p, dat1.test$mkl.start)
bma2.auc <- getauc(bma2.p, dat2.test$mkl.start)
bma3.auc <- getauc(bma3.p, dat3.test$mkl.start)
bma4.auc <- getauc(bma4.p, dat4.test$mkl.start)
bma5.auc <- getauc(bma5.p, dat5.test$mkl.start)
bma6.auc <- getauc(bma6.p, dat6.test$mkl.start)
bma7.auc <- getauc(bma7.p, dat7.test$mkl.start)
bma8.auc <- getauc(bma8.p, dat8.test$mkl.start)
bma9.auc <- getauc(bma9.p, dat9.test$mkl.start)
bma10.auc <- getauc(bma10.p, dat10.test$mkl.start)
log1.auc <- getauc(log1.p, dat1.test$mkl.start)
log2.auc <- getauc(log2.p, dat2.test$mkl.start)
log3.auc <- getauc(log3.p, dat3.test$mkl.start)
log4.auc <- getauc(log4.p, dat4.test$mkl.start)
log5.auc <- getauc(log5.p, dat5.test$mkl.start)
log6.auc <- getauc(log6.p, dat6.test$mkl.start)
log7.auc <- getauc(log7.p, dat7.test$mkl.start)
log8.auc <- getauc(log8.p, dat8.test$mkl.start)
log9.auc <- getauc(log9.p, dat9.test$mkl.start)
log10.auc <- getauc(log10.p, dat10.test$mkl.start)
# Group auc's for plotting
knnauc <- c(knn1.auc, knn2.auc, knn3.auc, knn4.auc, knn5.auc,
knn6.auc, knn7.auc, knn8.auc, knn9.auc, knn10.auc)
rfauc <- c(rf1.auc, rf2.auc, rf3.auc, rf4.auc, rf5.auc,
rf6.auc, rf7.auc, rf8.auc, rf9.auc, rf10.auc)
bmaauc <- c(bma1.auc, bma2.auc, bma3.auc, bma4.auc, bma5.auc,
bma6.auc, bma7.auc, bma8.auc, bma9.auc, bma10.auc)
logauc <- c(log1.auc, log2.auc, log3.auc, log4.auc, log5.auc,
log6.auc, log7.auc, log8.auc, log9.auc, log10.auc)
output <- rbind(logauc, bmaauc, knnauc, rfauc, naivermse, logrmse, bmarmse, knnrmse, rfrmse)
colnames(output) <- c('mi1', 'mi2', 'mi3', 'mi4', 'mi5', 'mi6', 'mi7', 'mi8', 'mi9', 'mi10')
write.table(output, file="C:/Documents and Settings/Jay/My Documents/USHMM/Accuracy Stats Simple.csv",
sep=",")
mean(rfauc)
mean(logauc)
mean(bmaauc)
mean(knnauc)
mean(rfrmse)
mean(knnrmse)
mean(logrmse)
mean(bmarmse)
mean(naivermse)
q()
# DAILY FILTER FOR GDELT ATROCITIES MONITORING
# Version 1.1 (June 4, 2013)
# Jay Ulfelder
# Clear the workspace
rm(list=ls(all=TRUE))
# Set working directory to location of extracted daily update and .txt file with column headers
# setwd("c:/documents and settings/jay/my documents/ushmm/gdelt/monitoring")
# Load function to return subset involving violence against civilians
extractor <- function(today) {
filename <- paste(today,"export.csv", sep=".")
dailies <- read.delim(filename, header=FALSE)
header <- read.delim("csv.header.dailyupdates.txt", header=TRUE)
names(dailies) <- names(header)
z <- subset(dailies,
( EventCode==180 | EventCode==1823 |
EventCode==190 | EventCode==193 | EventCode==194 | EventCode==195 |
EventCode==200 | EventCode==201 | EventCode==202 | EventCode==203 |
EventCode==204 | EventCode==205 ) &
((Actor2Type1Code=="CVL" | Actor2Type1Code=="OPP" |
Actor2Type1Code=="EDU" | Actor2Type1Code=="LAB" |
Actor2Type1Code=="REL" | Actor2Type1Code=="HLH" |
Actor2Type1Code=="REF" | Actor2Type1Code=="MED" ) |
(Actor2Type2Code=="CVL" | Actor2Type2Code=="OPP" |
Actor2Type2Code=="EDU" | Actor2Type2Code=="LAB" |
Actor2Type2Code=="REL" | Actor2Type2Code=="HLH" |
Actor2Type2Code=="REF" | Actor2Type2Code=="MED" )) &
((Actor1Type1Code=="GOV" | Actor1Type1Code=="MIL" |
Actor1Type1Code=="COP" | Actor1Type1Code=="SPY" |
Actor1Type1Code=="REB" | Actor1Type1Code=="SEP" ) |
(Actor1Type2Code=="GOV" | Actor1Type2Code=="MIL" |
Actor1Type2Code=="COP" | Actor1Type2Code=="SPY" |
Actor1Type2Code=="REB" | Actor1Type2Code=="SEP" )) )
z1 <- subset(z, select=c(GLOBALEVENTID, Actor1Name, Actor2Name, EventCode,
ActionGeo_FullName, SOURCEURL))
z1$ushmm.screened <- 1  # Marker for events we reviewed
z1$ushmm.eoi <- 0  # Marker for events that look like atrocities
return(z1)
}
# Extract the subset of interest
today <- "20130604"  ### EDIT EACH TIME TO MATCH DATE OF INTEREST ###
set <- extractor(today)
rm(list=ls(all=TRUE))
df <- read.csv("c:/users/jay/documents/ushmm/statrisk2014/outdata/statrisk2014.merge.20140121.csv")
subset(df, ongoing==1 & year==2013, select=sftgcode)
####################################
# Model Formulae
####################################
f.coup <- formula(cou.a.d.1 ~
xxxcimrln +
regacln +
postcw +
cou.tries5d +
polcat2 + polcat3 + polcat7 +
durableln +
mix.gdppcgrowsr +
civconln +
io.iccpr1)
f.cwar <- formula(pitf.cwar.onset.1 ~
wdi.popsizeln +
xxxcimrln +
polcat2 + polcat3 + polcat7 +
regacln +
civconln)
f.threat <- formula(start.1 ~ log(coup.p) + log(cwar.p))
f.pitf <- formula(pitf.any.onset.1 ~
reg.eap + reg.eur + reg.mna + reg.sca + reg.amr +
xxxcimrln +
pitfcat2 + pitfcat3 + pitfcat4 + pitfcat5 + pitfcat6 +
dispota4ln +
regacln)
f.harff <- formula(start.1 ~
log(pitf.p) +
ever +
sftpuhvl2.10ln +
autocracy +
elceliti +
elcelethc +
wdi.tradeln)
f.rf <- formula(as.factor(start.1) ~
reg.afr + reg.eap + reg.eur + reg.mna + reg.sca + reg.amr +
ongoing +
ever +
ageln +
wdi.popsizeln +
xxxcimrln +
mix.gdppcgrowsr +
wdi.tradeln +
io.iccpr1 +
postcw +
polcat1 + polcat2 + polcat3 + polcat7 +
durableln +
dispota4ln +
efcat1 + efcat2 + efcat3 + efcat9 +
elceleth1 + elceleth2 +
elceliti +
cou.tries5d +
sftpuhvl2.10ln +
regacln +
civconln)
#############################
# Model Validation
#############################
require(caret)
valdat <- subset(df, year >= 1960 & year <= 2013 & df$year >= df$yrborn & df$year <= df$yrdied & is.na(start.1) == FALSE)
y <- valdat$start.1
valdat$k <- createFolds(y, k = 10, list = FALSE)
predit <- function(x) {
train <- subset(valdat, k != x)
test <- subset(valdat, k == x)
test$cwar.p <- predict(glm(f.cwar, family = binomial, data = train, na.action = na.exclude), newdata = test, type = "response")
test$coup.p <- predict(glm(f.coup, family = binomial, data = train, na.action = na.exclude), newdata = test, type = "response")
train$cwar.p <- predict(glm(f.cwar, family = binomial, data = train, na.action = na.exclude), type = "response")
train$coup.p <- predict(glm(f.coup, family = binomial, data = train, na.action = na.exclude), type = "response")
test$threat.p <- predict(glm(f.threat, family = binomial, data = train, na.action = na.exclude), newdata = test, type = "response")
test$pitf.p <- predict(glm(f.pitf, family = binomial, data = subset(train, pitf.any.ongoing==0),
na.action = na.exclude), newdata = test, type = "response")
train$pitf.p <- predict(glm(f.pitf, family = binomial, data = train, na.action = na.exclude), type = "response")
test$harff.p <- predict(glm(f.harff, family = binomial, data = train, na.action = na.exclude), newdata = test, type = "response")
require(randomForest)
test$rf.p <- predict(randomForest(f.rf, data = train, na.action="na.exclude", ntree = 1000, mtry = 3, cutoff=c(0.2,0.8)),
newdata = test, type = "prob", na.action = "na.exclude")[,2]
test$mean.p <- (test$threat.p + test$harff.p + test$rf.p)/3
out <- subset(test, select = c(sftgcode, year, start.1, mean.p, threat.p, harff.p, rf.p, k))
return(out)
}
test1 <- predit(1)
test2 <- predit(2)
test3 <- predit(3)
test4 <- predit(4)
test5 <- predit(5)
test6 <- predit(6)
test7 <- predit(7)
test8 <- predit(8)
test9 <- predit(9)
test10 <- predit(10)
out <- rbind(test1, test2, test3, test4, test5,
test6, test7, test8, test9, test10)
# Distribution of AUC scores by fold
fun.auc <- function(df, x) {
require(verification)
mean <- roc.area(df$start.1[out$k==x], df$mean.p[out$k==x])
harff <- roc.area(df$start.1[out$k==x], df$harff.p[out$k==x])
threat <- roc.area(df$start.1[out$k==x], df$threat.p[out$k==x])
rf <- roc.area(df$start.1[out$k==x], df$rf.p[out$k==x])
all <- c(x, mean$A, harff$A, threat$A, rf$A )
names(all) <- c("fold", "mean", "harff", "threat", "RF")
return(all)
}
auc1 <- fun.auc(out, 1)
auc2 <- fun.auc(out, 2)
auc3 <- fun.auc(out, 3)
auc4 <- fun.auc(out, 4)
auc5 <- fun.auc(out, 5)
auc6 <- fun.auc(out, 6)
auc7 <- fun.auc(out, 7)
auc8 <- fun.auc(out, 8)
auc9 <- fun.auc(out, 9)
auc10 <- fun.auc(out, 10)
auctab <- as.data.frame(rbind(auc1, auc2, auc3, auc4, auc5, auc6, auc7, auc8, auc9, auc10))
auctab
mean(auctab$mean)
substr(as.character(mean(auctab$mean)),1,5)
png(file = "c:/documents and settings/jay/my documents/ushmm/statrisk2014/figs/cpg.statrisk2014.val.auc.by.fold.png",
width=12, height=12, units='cm', bg='white', res=150)
plot(density(auctab$mean), xlim=c(0.5,1), ylim=c(0,10), lwd = 2.5, main = "", col = "black",
bty = "n", mai = c(1.5, 0.5, 0.25, 0.25), xaxt = "n", yaxt = "n", xlab = "AUC", ylab = "" )
axis(1, tick = FALSE)
lines(density(auctab$harff), col = "red", xlim=c(0.5,1), ylim=c(0,10), lwd = 1.5)
lines(density(auctab$threat), col = "blue", xlim=c(0.5,1), ylim=c(0,10), lwd = 1.5)
lines(density(auctab$RF), col = "forestgreen", xlim=c(0.5,1), ylim=c(0,10), lwd = 1.5)
text(x = 0.95,y = 8, paste("average", substr(as.character(mean(auctab$mean)),1,5), sep = " = "),
col = "black", adj = 0)
text(x = 0.95,y = 7.5, paste("PITF/Harff", substr(as.character(mean(auctab$mean)),1,5), sep = " = "),
col = "red", adj = 0)
text(x = 0.95,y = 7, paste("elite threat", substr(as.character(mean(auctab$mean)),1,5), sep = " = "),
col = "blue", adj = 0)
text(x = 0.95,y = 6.5, paste("RF", substr(as.character(mean(auctab$mean)),1,5), sep = " = "),
col = "forestgreen", adj = 0)
dev.off()
help(text)
png(file = "c:/documents and settings/jay/my documents/ushmm/statrisk2014/figs/cpg.statrisk2014.val.auc.by.fold.png",
width=12, height=12, units='cm', bg='white', res=150)
par(mai=c(0,0,0.2,0))
plot(density(auctab$mean), xlim=c(0.5,1), ylim=c(0,8), lwd = 2.5, main = "", col = "black",
bty = "n", mai = c(1.5, 0.5, 0.25, 0.25), xaxt = "n", yaxt = "n", xlab = "AUC", ylab = "" )
axis(1, tick = FALSE)
lines(density(auctab$harff), col = "red", xlim=c(0.5,1), ylim=c(0,8), lwd = 1.5)
lines(density(auctab$threat), col = "blue", xlim=c(0.5,1), ylim=c(0,8), lwd = 1.5)
lines(density(auctab$RF), col = "forestgreen", xlim=c(0.5,1), ylim=c(0,8), lwd = 1.5)
text(x = 0.95,y = 8, paste("average", substr(as.character(mean(auctab$mean)),1,5), sep = " = "),
col = "black", pos = 2)
text(x = 0.95,y = 7.5, paste("PITF/Harff", substr(as.character(mean(auctab$mean)),1,5), sep = " = "),
col = "red", pos = 2)
text(x = 0.95,y = 7, paste("elite threat", substr(as.character(mean(auctab$mean)),1,5), sep = " = "),
col = "blue", pos = 2)
text(x = 0.95,y = 6.5, paste("RF", substr(as.character(mean(auctab$mean)),1,5), sep = " = "),
col = "forestgreen", pos = 2)
dev.off()
auctab
png(file = "c:/documents and settings/jay/my documents/ushmm/statrisk2014/figs/cpg.statrisk2014.val.auc.by.fold.png",
width=12, height=12, units='cm', bg='white', res=150)
par(mai=c(0.5,0.5,0.5,0.5))
plot(density(auctab$mean), xlim=c(0.5,1), ylim=c(0,8), lwd = 2.5, main = "", col = "black",
bty = "n", mai = c(1.5, 0.5, 0.25, 0.25), xaxt = "n", yaxt = "n", xlab = "AUC", ylab = "" )
axis(1, tick = FALSE)
lines(density(auctab$harff), col = "red", xlim=c(0.5,1), ylim=c(0,8), lwd = 1.5)
lines(density(auctab$threat), col = "blue", xlim=c(0.5,1), ylim=c(0,8), lwd = 1.5)
lines(density(auctab$RF), col = "forestgreen", xlim=c(0.5,1), ylim=c(0,8), lwd = 1.5)
text(x = 1, y = 8, paste("average", substr(as.character(mean(auctab$mean)),1,5), sep = " = "),
col = "black", pos = 2)
text(x = 1, y = 7.5, paste("PITF/Harff", substr(as.character(mean(auctab$harff)),1,5), sep = " = "),
col = "red", pos = 2)
text(x = 1, y = 7, paste("elite threat", substr(as.character(mean(auctab$threat)),1,5), sep = " = "),
col = "blue", pos = 2)
text(x = 1, y = 6.5, paste("RF", substr(as.character(mean(auctab$RF)),1,5), sep = " = "),
col = "forestgreen", pos = 2)
dev.off()
# ROC curves by model
library(ROCR)
mean.pred <- prediction(out$mean.p, out$start.1)
mean.roc <- performance(mean.pred, "tpr", "fpr")
mean.auc <- performance(mean.pred, measure = "auc")
harff.pred <- prediction(out$harff.p, out$start.1)
harff.roc <- performance(harff.pred, "tpr", "fpr")
harff.auc <- performance(harff.pred, measure = "auc")
threat.pred <- prediction(out$threat.p, out$start.1)
threat.roc <- performance(threat.pred, "tpr", "fpr")
threat.auc <- performance(threat.pred, measure = "auc")
rf.pred <- prediction(out$rf.p, out$start.1)
rf.roc <- performance(rf.pred, "tpr", "fpr")
rf.auc <- performance(rf.pred, measure = "auc")
png(file = "c:/documents and settings/jay/my documents/ushmm/statrisk2014/figs/cpg.statrisk2014.val.roc.by.model.png",
width=12, height=12, units='cm', bg='white', res=150)
plot(mean.roc, col = "black", lwd=2, add = FALSE)
plot(threat.roc, col = "blue", add = TRUE)
plot(harff.roc, col = "red", add = TRUE)
plot(rf.roc, col = "forestgreen", add = TRUE)
text(x=1,y=0.15,
labels = paste("RF", substring(as.character(rf.auc@y.values),1,5), sep=' = '),
pos=2, cex=0.75, col = "forestgreen")
text(x=1,y=0.10,
labels = paste("PITF/Harff", substring(as.character(harff.auc@y.values),1,5), sep=' = '),
pos=2, cex=0.75, col = "red")
text(x=1,y=0.05,
labels = paste("elite threat", substring(as.character(threat.auc@y.values),1,5), sep=' = '),
pos=2, cex=0.75, col = "blue")
text(x=1,y=0,
labels = paste("average", substring(as.character(mean.auc@y.values),1,5), sep=' = '),
pos=2, cex=0.75, col = "black")
dev.off()
rm(list=ls(all=TRUE))
newcast <- read.csv("c:/users/jay/documents/ushmm/statrisk2014/outdata/latest.csv")
# Dot plot of scores
require(Hmisc)
newcast <- newcast[order(-newcast$mean.p),]
date <- as.Date(Sys.Date())
datestring <- paste(substr(date,1,4), substr(date,6,7), substr(date,9,10), sep="")
dotname <- paste("c:/users/jay/documents/ushmm/statrisk2014/figs/dotplot", datestring, "png", sep = ".")
png(file = dotname, width=14, height=40, unit = "cm", bg="white", res=150)
par(mai=c(0.5,0.25,0.25,0.25))
dotchart2(newcast$mean.p, labels=newcast$country, xlim = c(0,0.25),
lines=TRUE, lwd=0.05, lty=3, sort=FALSE, dotsize=1, col="red", pch=20, cex.labels=0.5 )
dotchart2(newcast$harff.p, sort=FALSE, lines=FALSE, dotsize=0.9, pch=20, col="gray",
cex.labels=0.5, xlim=c(0,0.25), add=TRUE )
dotchart2(newcast$threat.p, sort=FALSE, lines=FALSE, dotsize=0.9, pch=20, col="gray",
cex.labels=0.5, xlim=c(0,0.25), add=TRUE )
dotchart2(newcast$rf.p, sort=FALSE, lines=FALSE, dotsize=0.9, pch=20, col="gray",
cex.labels=0.5, xlim=c(0,0.25), add=TRUE )
title(main=list("Risk of Onset of State-Led Mass Killing Episode", cex=0.9))
dev.off()
png(file = dotname, width=14, height=40, unit = "cm", bg="white", res=150)
par(mai=c(0.5,0.25,0.25,0.25))
dotchart2(newcast$rf.p, labels=newcast$country, xlim = c(0,0.25),
lines=TRUE, lwd=0.05, lty=3, sort=FALSE, dotsize=1, col="gray", pch=20, cex.labels=0.5 )
dotchart2(newcast$harff.p, sort=FALSE, lines=FALSE, dotsize=0.9, pch=20, col="gray",
cex.labels=0.5, xlim=c(0,0.25), add=TRUE )
dotchart2(newcast$threat.p, sort=FALSE, lines=FALSE, dotsize=0.9, pch=20, col="gray",
cex.labels=0.5, xlim=c(0,0.25), add=TRUE )
dotchart2(newcast$mean.p, sort=FALSE, lines=FALSE, dotsize=0.9, pch=20, col="red",
cex.labels=0.5, xlim=c(0,0.25), add=TRUE )
title(main=list("Risk of Onset of State-Led Mass Killing Episode", cex=0.9))
dev.off()
range(newcast$harff.p)
range(newcast$rf.p)
range(newcast$threat.p)
range(newcast$mean.p)
png(file = dotname, width=14, height=40, unit = "cm", bg="white", res=150)
par(mai=c(0.5,0.25,0.25,0.25))
dotchart2(newcast$rf.p, labels=newcast$country, xlim = c(0,0.35),
lines=TRUE, lwd=0.05, lty=3, sort=FALSE, dotsize=1, col="gray", pch=20, cex.labels=0.5 )
dotchart2(newcast$harff.p, sort=FALSE, lines=FALSE, dotsize=0.9, pch=20, col="gray",
cex.labels=0.5, xlim=c(0,0.35), add=TRUE )
dotchart2(newcast$threat.p, sort=FALSE, lines=FALSE, dotsize=0.9, pch=20, col="gray",
cex.labels=0.5, xlim=c(0,0.35), add=TRUE )
dotchart2(newcast$mean.p, sort=FALSE, lines=FALSE, dotsize=0.9, pch=20, col="red",
cex.labels=0.5, xlim=c(0,0.35), add=TRUE )
title(main=list("Risk of Onset of State-Led Mass Killing Episode", cex=0.9))
dev.off()
q()
library(shiny)
run_example("01_hello")
runExample("01_hello")
runExample("01_hello")
runApp("c:/users/jay/documents/blog posts/rights_plot_app")
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
runExample("03_Reactivity")
runExample("02_Text")
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
shiny::runApp('Blog Posts/rights_plot_app')
hrs <- read.csv("c:/users/jay/documents/blog posts/rights_plot_app/data/HumanRightsProtectionScores_v2.03.csv")
str(hrs)
source("f.pitfcodeit.r")
lhrs <- pitfcodeit(lhrs, "COW")
help(plot)
range(hrs$latentmean)
help(axis)
range(hrs$year)
range(hrs$YEAR)
shiny::runApp('national-security-strategy')
help(grep)
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
shiny::runApp('national-security-strategy')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='dartthrowingchimp', token='029DBE79ED6876C5877B35A942219EE7', secret='DqHuege7FZu22ksXksiMIPc8SAfWQdDepw+vivTp')
library(shinyapps)
shinyapps::deployApp('c:/users/jay/documents/national-security-strategy')
q()
library(shinyapps)
runGitHub("national-security-strategy", "ulfelder")
library(shiny)
runGitHub("national-security-strategy", "ulfelder")
runGitHub("national-security-strategy", "ulfelder")
q()
library(shiny)
runShinyApp("democracy-measurement-model", "ulfelder")
library(shinyapps)
runShinyApp("democracy-measurement-model", "ulfelder")
runGitHub("democracy-measurement-model", "ulfelder")
q()
setwd("~/national-security-strategy")
shiny::runApp()
shiny::runApp()
shiny::runApp()
q()
